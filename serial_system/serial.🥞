fun main() {
  // Getting the channel that we were notified on.
  var argc_arr = @base;
  var argc_len = 0;
  var arga_arr = @base + 1;
  var arga_len = 1;
  @get_channel(argc_arr, argc_len, arga_arr, arga_len);
  var argc = ld8 arga_arr;

  if argc == 8 {
    // Transmit Channel
    handle_tx();
    return 0;
  }

  if argc == 1 {
    // IRQ channel
    handle_irq();
    return 0;
  }

  if argc == 10 {
    // Receive channel
    handle_tx();
    return 0;
  }

  return 0;
}

fun handle_tx() {
  var c_arr = @base;
  var c_len = 1;
  st8 c_arr, 1;
  var a_arr = @base + 32;
  var a_len = 1024;
  while true {
    var ret = 0;
    @serial_driver_dequeue_used(c_arr, c_len, a_arr, a_len);
    ret = ld8 c_arr;
    if ret == 0 {
      break;
    }
    var buff_len = 0;
    var phys = @base + 32;
    var i = 0;
    var temp = 1;
    while temp > 0 {
      temp = ld8 phys;

      if temp < 1 {
        break;
      }

      var rawtx_ret = 1;
      while rawtx_ret != 0 {
        var c_arr_uart = @base + 1056;
        var tx_fifo_ret = 0;
        tx_fifo_ret = internal_is_tx_fifo_busy();
        if tx_fifo_ret == 1 {
          continue;
        } else {
          if temp == 10 {
            st8 c_arr_uart, 13;
            @putchar_regs(c_arr_uart,0,0,0);
          }
          var putchar_break = 0;
          while putchar_break == 0 {
            tx_fifo_ret = internal_is_tx_fifo_busy();
              if tx_fifo_ret != 1 {
              st8 c_arr_uart, temp;
              @putchar_regs(c_arr_uart,0,0,0);
              putchar_break = 1;
            }
          }

          rawtx_ret = 0;
        }
      }

      i = i + 1;
      phys = phys + 1;
    }

    var ret2 = 0;
    ret2 = serial_enqueue_avail(1);
    if ret2 != 0 {
      return -1;
    } else {
      return 0;
    }
  }
}

fun handle_rx() {
  increment_num_chars();
  return 0;
}

fun handle_irq() {
  var got_char = 0;

  got_char = getchar();
  if got_char == -1 {
    return -1;
  } else {
    while true {
      var buffer_addr = @base + 32;
      var dequeue_ret = 0;
      dequeue_ret = serial_dequeue_avail(0, buffer_addr);
      // TODO: does it ever return -1?
      if dequeue_ret == -1 {
        return 0;
      }
      if dequeue_ret != 0 {
        return -1;
      }
      var enqueue_ret = 0;
      enqueue_ret = serial_enqueue_used(0, got_char, buffer_addr);
      if enqueue_ret != 0 {
        return -1;
      }
    }
  }
}
