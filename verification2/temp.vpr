import "./device.vpr"

// Defines
define full_access(a, pm) forall j: Int :: 0 <= j < alen(a) ==> acc(slot(a, j).heap_elem, pm)
define slice_access(a, idx, length, pm) forall j: Int :: 0 <= idx <= j < idx + length <= len(a) ==> acc(slot(a, j).heap_elem, pm)
define valid_heap_addr(addr) addr % 8 == 0 && addr >= 0 && alen(heap) > addr / 8

domain IArray  {

  function slot(a: IArray, i: Int): Ref

  function alen(a: IArray): Int

  function first(r: Ref): IArray

  function second(r: Ref): Int

  axiom all_diff {
    (forall a: IArray, i: Int ::
      { slot(a, i) }
      first(slot(a, i)) == a && second(slot(a, i)) == i)
  }

  axiom len_nonneg {
    (forall a: IArray :: { alen(a) } alen(a) >= 0)
  }
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {

  function not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"

  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"

  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"

  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"

  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"

  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"

  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"

  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"

  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
}

field heap_elem: Int

method copy_slice(src: IArray, src_idx: Int, dst: IArray, dst_idx: Int, length: Int)
  requires 0 <= src_idx
  requires src_idx <= alen(src)
  requires src_idx + length <= alen(src)
  requires (forall j: Int ::0 <= src_idx && src_idx <= j &&
      (j < src_idx + length && src_idx + length <= alen(src)) ==>
      acc(slot(src, j).heap_elem, wildcard))
  requires 0 <= dst_idx
  requires dst_idx <= alen(dst)
  requires dst_idx + length <= alen(dst)
  requires (forall j: Int ::0 <= dst_idx && dst_idx <= j &&
      (j < dst_idx + length && dst_idx + length <= alen(dst)) ==>
      acc(slot(dst, j).heap_elem, write))
  ensures (forall j: Int ::0 <= src_idx && src_idx <= j &&
      (j < src_idx + length && src_idx + length <= alen(src)) ==>
      acc(slot(src, j).heap_elem, wildcard))
  ensures (forall j: Int ::0 <= dst_idx && dst_idx <= j &&
      (j < dst_idx + length && dst_idx + length <= alen(dst)) ==>
      acc(slot(dst, j).heap_elem, write))
  ensures (forall i: Int ::0 <= i && i < length ==>
      old(slot(src, src_idx + i).heap_elem) ==
      slot(src, src_idx + i).heap_elem)
  ensures (forall i: Int ::0 <= i && i < length ==>
      slot(src, src_idx + i).heap_elem == slot(dst, dst_idx + i).heap_elem)


method create_slice(src: IArray, src_idx: Int, length: Int)
  returns (dst: IArray)
  requires 0 <= src_idx
  requires src_idx <= alen(src)
  requires src_idx + length <= alen(src)
  requires (forall j: Int ::0 <= src_idx && src_idx <= j &&
      (j < src_idx + length && src_idx + length <= alen(src)) ==>
      acc(slot(src, j).heap_elem, wildcard))
  ensures length == alen(dst)
  ensures (forall j: Int ::0 <= src_idx && src_idx <= j &&
      (j < src_idx + length && src_idx + length <= alen(src)) ==>
      acc(slot(src, j).heap_elem, wildcard))
  ensures (forall j: Int ::0 <= 0 && 0 <= j &&
      (j < 0 + length && 0 + length <= alen(dst)) ==>
      acc(slot(dst, j).heap_elem, write))
  ensures (forall i: Int ::0 <= i && i < length ==>
      old(slot(src, src_idx + i).heap_elem) ==
      slot(src, src_idx + i).heap_elem)
  ensures (forall i: Int ::0 <= i && i < length ==>
      slot(src, src_idx + i).heap_elem == slot(dst, i).heap_elem)
{
  inhale length == alen(dst)
  inhale (forall j: Int ::0 <= 0 && 0 <= j &&
      (j < 0 + length && 0 + length <= alen(dst)) ==>
      acc(slot(dst, j).heap_elem, write))
  copy_slice(src, src_idx, dst, 0, length)
}

method shared_load(address: Int) returns (value: Int)
  ensures value > 0

method shared_store(address: Int, value: Int)

method f_main(heap: IArray) returns (retval: Int)
{
  retval := 0
  goto return_label
  label return_label
}

method f_pnk_modulo(heap: IArray, arg_a: Int, arg_b: Int)
  returns (retval: Int)
  requires arg_b > 0 // && exists n: Int :: arg_b == 2 ^ n
  ensures retval == arg_a % arg_b
{
  var pnk_modulo_a_0: Int
  var pnk_modulo_b_1: Int
  pnk_modulo_a_0 := arg_a
  pnk_modulo_b_1 := arg_b
  {
    var pnk_modulo_result_2: Int
    pnk_modulo_result_2 := bv64_to_int(bv64_and(bv64_from_int(pnk_modulo_a_0),
      bv64_from_int(pnk_modulo_b_1 - 1)))
    retval := pnk_modulo_result_2
    goto return_label
  }
  label return_label
  inhale retval == arg_a % arg_b // sorry
}

method f_net_queue_empty(heap: IArray, arg_queue_ptr: Int)
  returns (retval: Int)
  ensures retval == 1 || retval == 0
{
  var net_queue_empty_queue_ptr_3: Int
  net_queue_empty_queue_ptr_3 := arg_queue_ptr
  {
    var net_queue_empty_tail_4: Int
    net_queue_empty_tail_4 := 0
    net_queue_empty_tail_4 := shared_load(net_queue_empty_queue_ptr_3)
    {
      var net_queue_empty_head_5: Int
      net_queue_empty_head_5 := 0
      net_queue_empty_head_5 := shared_load(net_queue_empty_queue_ptr_3 + 8)
      {
        var net_queue_empty_empty_6: Int
        net_queue_empty_empty_6 := (net_queue_empty_tail_4 -
          net_queue_empty_head_5 ==
          0 ?
            1 :
            0)
        retval := net_queue_empty_empty_6
        goto return_label
      }
    }
  }
  label return_label
}

method f_net_queue_full(heap: IArray, arg_queue: Int, arg_length: Int)
  returns (retval: Int)
  ensures retval == 1 || retval == 0
{
  var net_queue_full_queue_7: Int
  var net_queue_full_length_8: Int
  net_queue_full_queue_7 := arg_queue
  net_queue_full_length_8 := arg_length
  {
    var net_queue_full_tail_9: Int
    net_queue_full_tail_9 := 0
    net_queue_full_tail_9 := shared_load(net_queue_full_queue_7)
    {
      var net_queue_full_head_10: Int
      net_queue_full_head_10 := 0
      net_queue_full_head_10 := shared_load(net_queue_full_queue_7 + 8)
      {
        var net_queue_full_full_11: Int
        net_queue_full_full_11 := (net_queue_full_tail_9 -
          net_queue_full_head_10 ==
          net_queue_full_length_8 ?
            1 :
            0)
        retval := net_queue_full_full_11
        goto return_label
      }
    }
  }
  label return_label
}

method f_net_enqueue(heap: IArray, arg_queue: Int, arg_capacity: Int, arg_buffer_addr: Int)
  returns (retval: Int)
  requires valid_heap_addr(arg_buffer_addr)
  requires full_access(heap, write)
  requires alen(heap) > arg_buffer_addr / 8 + 2
{
  var net_enqueue_queue_12: Int
  var net_enqueue_capacity_13: Int
  var net_enqueue_buffer_addr_14: Int
  net_enqueue_queue_12 := arg_queue
  net_enqueue_capacity_13 := arg_capacity
  net_enqueue_buffer_addr_14 := arg_buffer_addr
  {
    var net_enqueue_full_15: Int
    var fr_16: Int
    fr_16 := f_net_queue_full(heap, net_enqueue_queue_12, net_enqueue_capacity_13)
    net_enqueue_full_15 := fr_16
    if (net_enqueue_full_15 != 0) {
      retval := -1
      goto return_label
    }
    {
      var net_enqueue_tail_17: Int
      net_enqueue_tail_17 := 0
      net_enqueue_tail_17 := shared_load(net_enqueue_queue_12)
      inhale net_enqueue_capacity_13 > 0
      {
        var net_enqueue_idx_18: Int
        var fr_19: Int
        fr_19 := f_pnk_modulo(heap, net_enqueue_tail_17, net_enqueue_capacity_13)
        net_enqueue_idx_18 := fr_19
        {
          var net_enqueue_buff_20: Int
          net_enqueue_buff_20 := net_enqueue_queue_12 + 3 * 8 +
            net_enqueue_idx_18 * (2 * 8)
          {
            var net_enqueue_buffer_21: IArray
            var fr_22: IArray
            assert net_enqueue_buffer_addr_14 % 8 == 0
            fr_22 := create_slice(heap, net_enqueue_buffer_addr_14 / 8, 2)
            net_enqueue_buffer_21 := fr_22
            shared_store(net_enqueue_buff_20, slot(net_enqueue_buffer_21, 0).heap_elem)
            shared_store(net_enqueue_buff_20 + 8, slot(net_enqueue_buffer_21,
              1).heap_elem)
            net_enqueue_tail_17 := net_enqueue_tail_17 + 1
            shared_store(net_enqueue_queue_12, net_enqueue_tail_17)
            retval := 0
            goto return_label
          }
        }
      }
    }
  }
  label return_label
}

/*
method f_net_dequeue(heap: IArray, arg_queue: Int, arg_capacity: Int)
  returns (retval: Int)
{
  var net_dequeue_queue_23: Int
  var net_dequeue_capacity_24: Int
  net_dequeue_queue_23 := arg_queue
  net_dequeue_capacity_24 := arg_capacity
  {
    var net_dequeue_empty_25: Int
    var fr_26: Int
    fr_26 := f_net_queue_empty(heap, net_dequeue_queue_23)
    net_dequeue_empty_25 := fr_26
    if (net_dequeue_empty_25 != 0) {
      {
        var fr_27: IArray
        inhale alen(fr_27) == 2
        inhale (forall j: Int ::0 <= 0 && 0 <= j &&
            (j < 0 + alen(fr_27) && 0 + alen(fr_27) <= alen(fr_27)) ==>
            acc(slot(fr_27, j).heap_elem, write))
        slot(fr_27, 0).heap_elem := -1
        slot(fr_27, 1).heap_elem := -1
        retval := fr_27
        goto return_label
      }
    }
    {
      var net_dequeue_head_28: Int
      net_dequeue_head_28 := 0
      net_dequeue_head_28 := shared_load(net_dequeue_queue_23 + 8)
      {
        var net_dequeue_idx_29: Int
        var fr_30: Int
        fr_30 := f_pnk_modulo(heap, net_dequeue_head_28, net_dequeue_capacity_24)
        net_dequeue_idx_29 := fr_30
        {
          var net_dequeue_buff_31: Int
          net_dequeue_buff_31 := net_dequeue_queue_23 + 3 * 8 +
            net_dequeue_idx_29 * (2 * 8)
          {
            var net_dequeue_io_or_offset_32: Int
            net_dequeue_io_or_offset_32 := 0
            net_dequeue_io_or_offset_32 := shared_load(net_dequeue_buff_31)
            {
              var net_dequeue_len_33: Int
              net_dequeue_len_33 := 0
              net_dequeue_len_33 := shared_load(net_dequeue_buff_31 + 8)
              net_dequeue_head_28 := net_dequeue_head_28 + 1
              shared_store(net_dequeue_queue_23 + 8, net_dequeue_head_28)
              {
                var fr_34: IArray
                inhale alen(fr_34) == 2
                inhale (forall j: Int ::0 <= 0 && 0 <= j &&
                    (j < 0 + alen(fr_34) && 0 + alen(fr_34) <= alen(fr_34)) ==>
                    acc(slot(fr_34, j).heap_elem, write))
                slot(fr_34, 0).heap_elem := net_dequeue_io_or_offset_32
                slot(fr_34, 1).heap_elem := net_dequeue_len_33
                retval := fr_34
                goto return_label
              }
            }
          }
        }
      }
    }
  }
  label return_label
}
*/

method f_net_request_signal(heap: IArray, arg_queue_ptr: Int)
  returns (retval: Int)
{
  var net_request_signal_queue_ptr_35: Int
  net_request_signal_queue_ptr_35 := arg_queue_ptr
  {
    var net_request_signal_signal_36: Int
    net_request_signal_signal_36 := 0
    shared_store(net_request_signal_queue_ptr_35 + 2 * 8, net_request_signal_signal_36)
    retval := 0
    goto return_label
  }
  label return_label
}

method f_net_cancel_signal(heap: IArray, arg_queue_ptr: Int)
  returns (retval: Int)
{
  var net_cancel_signal_queue_ptr_37: Int
  net_cancel_signal_queue_ptr_37 := arg_queue_ptr
  {
    var net_cancel_signal_signal_38: Int
    net_cancel_signal_signal_38 := 1
    shared_store(net_cancel_signal_queue_ptr_37 + 2 * 8, net_cancel_signal_signal_38)
    retval := 0
    goto return_label
  }
  label return_label
}

method f_net_require_signal(heap: IArray, arg_queue_ptr: Int)
  returns (retval: Int)
  ensures retval == 1 || retval == 0
{
  var net_require_signal_queue_ptr_39: Int
  net_require_signal_queue_ptr_39 := arg_queue_ptr
  {
    var net_require_signal_signalled_40: Int
    net_require_signal_signalled_40 := 0
    net_require_signal_signalled_40 := shared_load(net_require_signal_queue_ptr_39 +
      2 * 8)
    retval := (0 == net_require_signal_signalled_40 ? 1 : 0)
    goto return_label
  }
  label return_label
}

method f_get_device_EIR(heap: IArray) returns (retval: Int)
  requires full_access(heap, write) && alen(heap) > 0
{
  {
    var get_device_EIR_eth_3: Int
    assert 0 % 8 == 0
    get_device_EIR_eth_3 := slot(heap, 0 / 8).heap_elem
    {
      var get_device_EIR_eir_4: Int
      get_device_EIR_eir_4 := 0
      get_device_EIR_eir_4 := shared_load(get_device_EIR_eth_3 + 4)
      retval := get_device_EIR_eir_4
      goto return_label
    }
  }
  label return_label
}

method f_is_EIR_RXF(heap: IArray, arg_eir: Int) returns (retval: Int)
  ensures retval == 1 || retval == 0
{
  var is_EIR_RXF_eir_5: Int
  is_EIR_RXF_eir_5 := arg_eir
  retval := (bv64_to_int(bv64_and(bv64_from_int(is_EIR_RXF_eir_5), bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1),
    bv64_from_int(25)))))) !=
    0 ?
      1 :
      0)
  goto return_label
  label return_label
}

method f_is_EIR_TXF(heap: IArray, arg_eir: Int) returns (retval: Int)
  ensures retval == 1 || retval == 0
{
  var is_EIR_TXF_eir_6: Int
  is_EIR_TXF_eir_6 := arg_eir
  retval := (bv64_to_int(bv64_and(bv64_from_int(is_EIR_TXF_eir_6), bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1),
    bv64_from_int(27)))))) !=
    0 ?
      1 :
      0)
  goto return_label
  label return_label
}

method f_clear_device_EIR(heap: IArray) returns (retval: Int)
  requires full_access(heap, write) && alen(heap) > 0
{
  {
    var clear_device_EIR_eth_49: Int
    assert 0 % 8 == 0
    clear_device_EIR_eth_49 := slot(heap, 0 / 8).heap_elem
    shared_store(clear_device_EIR_eth_49 + 4, bv64_to_int(bv64_or(bv64_from_int(bv64_to_int(bv64_or(bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1),
      bv64_from_int(25)))), bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1),
      bv64_from_int(27))))))), bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1),
      bv64_from_int(22)))))))
    retval := 0
    goto return_label
  }
  label return_label
}

method f_set_device_RDAR(heap: IArray) returns (retval: Int)
  requires full_access(heap, write) && alen(heap) > 0
{
  {
    var set_device_RDAR_eth_50: Int
    assert 0 % 8 == 0
    set_device_RDAR_eth_50 := slot(heap, 0 / 8).heap_elem
    shared_store(set_device_RDAR_eth_50 + 16, bv64_to_int(bv64_shl(bv64_from_int(1),
      bv64_from_int(24))))
    wakeup_receive()
    retval := 0
    goto return_label
  }
  label return_label
}

method f_set_device_TDAR(heap: IArray) returns (retval: Int)
  requires full_access(heap, write) && alen(heap) > 0
{
  {
    var set_device_TDAR_eth_51: Int
    assert 0 % 8 == 0
    set_device_TDAR_eth_51 := slot(heap, 0 / 8).heap_elem
    shared_store(set_device_TDAR_eth_51 + 20, bv64_to_int(bv64_shl(bv64_from_int(1),
      bv64_from_int(24))))
    retval := 0
    wakeup_transmit()
    goto return_label
  }
  label return_label
}

method f_descriptor_get_len(heap: IArray, arg_descriptor: Int)
  returns (retval: Int)
  ensures retval >= 0 && retval < 65536
{
  var descriptor_get_len_descriptor_52: Int
  descriptor_get_len_descriptor_52 := arg_descriptor
  {
    var descriptor_get_len_result_53: Int
    descriptor_get_len_result_53 := bv64_to_int(bv64_and(bv64_from_int(descriptor_get_len_descriptor_52),
      bv64_from_int(65535)))
    retval := descriptor_get_len_result_53
    goto return_label
  }
  label return_label
}

method f_rx_descriptor_empty(heap: IArray, arg_descriptor: Int)
  returns (retval: Int)
  ensures retval == 1 || retval == 0
{
  var rx_descriptor_empty_descriptor_54: Int
  rx_descriptor_empty_descriptor_54 := arg_descriptor
  {
    var rx_descriptor_empty_stat_55: Int
    rx_descriptor_empty_stat_55 := bv64_to_int(bv64_and(bv64_from_int(bv64_to_int(bv64_ashr(bv64_from_int(rx_descriptor_empty_descriptor_54),
      bv64_from_int(16)))), bv64_from_int(65535)))
    {
      var rx_descriptor_empty_empty_56: Int
      rx_descriptor_empty_empty_56 := (bv64_to_int(bv64_and(bv64_from_int(rx_descriptor_empty_stat_55),
        bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1), bv64_from_int(15)))))) !=
        0 ?
          1 :
          0)
      retval := rx_descriptor_empty_empty_56
      goto return_label
    }
  }
  label return_label
}

method f_tx_descriptor_ready(heap: IArray, arg_descriptor: Int)
  returns (retval: Int)
  ensures retval == 1 || retval == 0
{
  var tx_descriptor_ready_descriptor_57: Int
  tx_descriptor_ready_descriptor_57 := arg_descriptor
  {
    var tx_descriptor_ready_stat_58: Int
    tx_descriptor_ready_stat_58 := bv64_to_int(bv64_and(bv64_from_int(bv64_to_int(bv64_ashr(bv64_from_int(tx_descriptor_ready_descriptor_57),
      bv64_from_int(16)))), bv64_from_int(65535)))
    {
      var tx_descriptor_ready_ready_59: Int
      tx_descriptor_ready_ready_59 := (bv64_to_int(bv64_and(bv64_from_int(tx_descriptor_ready_stat_58),
        bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1), bv64_from_int(15)))))) !=
        0 ?
          1 :
          0)
      retval := tx_descriptor_ready_ready_59
      goto return_label
    }
  }
  label return_label
}

method f_rx_update_device_ring_slot(heap: IArray, arg_descr: Int, arg_idx: Int,
  arg_net_buffer: IArray, arg_hw_capacity: Int)
  returns (retval: Int)
  requires alen(arg_net_buffer) == 2 &&
    (forall j: Int ::0 <= 0 && 0 <= j &&
      (j < 0 + 2 && 0 + 2 <= alen(arg_net_buffer)) ==>
      acc(slot(arg_net_buffer, j).heap_elem, write))
{
  var rx_update_device_ring_slot_descr_60: Int
  var rx_update_device_ring_slot_idx_61: Int
  var rx_update_device_ring_slot_net_buffer_62: IArray
  var rx_update_device_ring_slot_hw_capacity_63: Int
  rx_update_device_ring_slot_descr_60 := arg_descr
  rx_update_device_ring_slot_idx_61 := arg_idx
  rx_update_device_ring_slot_net_buffer_62 := arg_net_buffer
  rx_update_device_ring_slot_hw_capacity_63 := arg_hw_capacity
  {
    var rx_update_device_ring_slot_dst_addr_64: Int
    rx_update_device_ring_slot_dst_addr_64 := rx_update_device_ring_slot_descr_60 +
      rx_update_device_ring_slot_idx_61 * 8
    {
      var rx_update_device_ring_slot_stat_65: Int
      rx_update_device_ring_slot_stat_65 := bv64_to_int(bv64_shl(bv64_from_int(1),
        bv64_from_int(15)))
      if ((rx_update_device_ring_slot_idx_61 + 1 ==
      rx_update_device_ring_slot_hw_capacity_63 ?
        1 :
        0) !=
      0) {
        rx_update_device_ring_slot_stat_65 := bv64_to_int(bv64_or(bv64_from_int(rx_update_device_ring_slot_stat_65),
          bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1), bv64_from_int(13))))))
      }
      {
        var rx_update_device_ring_slot_io_or_offset_66: Int
        rx_update_device_ring_slot_io_or_offset_66 := slot(rx_update_device_ring_slot_net_buffer_62,
          0).heap_elem
        {
          var rx_update_device_ring_slot_len_67: Int
          rx_update_device_ring_slot_len_67 := slot(rx_update_device_ring_slot_net_buffer_62,
            1).heap_elem
          {
            var rx_update_device_ring_slot_descriptor_68: Int
            rx_update_device_ring_slot_descriptor_68 := bv64_to_int(bv64_or(bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(rx_update_device_ring_slot_stat_65),
              bv64_from_int(16)))), bv64_from_int(rx_update_device_ring_slot_len_67)))
            shared_store(rx_update_device_ring_slot_dst_addr_64 + 4, rx_update_device_ring_slot_io_or_offset_66)
            shared_store(rx_update_device_ring_slot_dst_addr_64, rx_update_device_ring_slot_descriptor_68)
            retval := 0
            goto return_label
          }
        }
      }
    }
  }
  label return_label
}

method f_tx_update_device_ring_slot(heap: IArray, arg_descr: Int, arg_idx: Int,
  arg_net_buffer: IArray, arg_hw_capacity: Int)
  returns (retval: Int)
  requires alen(arg_net_buffer) == 2 &&
    (forall j: Int ::0 <= 0 && 0 <= j &&
      (j < 0 + 2 && 0 + 2 <= alen(arg_net_buffer)) ==>
      acc(slot(arg_net_buffer, j).heap_elem, write))
{
  var tx_update_device_ring_slot_descr_69: Int
  var tx_update_device_ring_slot_idx_70: Int
  var tx_update_device_ring_slot_net_buffer_71: IArray
  var tx_update_device_ring_slot_hw_capacity_72: Int
  tx_update_device_ring_slot_descr_69 := arg_descr
  tx_update_device_ring_slot_idx_70 := arg_idx
  tx_update_device_ring_slot_net_buffer_71 := arg_net_buffer
  tx_update_device_ring_slot_hw_capacity_72 := arg_hw_capacity
  {
    var tx_update_device_ring_slot_dst_addr_73: Int
    tx_update_device_ring_slot_dst_addr_73 := tx_update_device_ring_slot_descr_69 +
      tx_update_device_ring_slot_idx_70 * 8
    {
      var tx_update_device_ring_slot_stat_74: Int
      tx_update_device_ring_slot_stat_74 := bv64_to_int(bv64_or(bv64_from_int(bv64_to_int(bv64_or(bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1),
        bv64_from_int(15)))), bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1),
        bv64_from_int(10))))))), bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1),
        bv64_from_int(11))))))
      if ((tx_update_device_ring_slot_idx_70 + 1 ==
      tx_update_device_ring_slot_hw_capacity_72 ?
        1 :
        0) !=
      0) {
        tx_update_device_ring_slot_stat_74 := bv64_to_int(bv64_or(bv64_from_int(tx_update_device_ring_slot_stat_74),
          bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(1), bv64_from_int(13))))))
      }
      {
        var tx_update_device_ring_slot_io_or_offset_75: Int
        tx_update_device_ring_slot_io_or_offset_75 := slot(tx_update_device_ring_slot_net_buffer_71,
          0).heap_elem
        {
          var tx_update_device_ring_slot_len_76: Int
          tx_update_device_ring_slot_len_76 := slot(tx_update_device_ring_slot_net_buffer_71,
            1).heap_elem
          {
            var tx_update_device_ring_slot_descriptor_77: Int
            tx_update_device_ring_slot_descriptor_77 := bv64_to_int(bv64_or(bv64_from_int(bv64_to_int(bv64_shl(bv64_from_int(tx_update_device_ring_slot_stat_74),
              bv64_from_int(16)))), bv64_from_int(tx_update_device_ring_slot_len_76)))
            shared_store(tx_update_device_ring_slot_dst_addr_73 + 4, tx_update_device_ring_slot_io_or_offset_75)
            shared_store(tx_update_device_ring_slot_dst_addr_73, tx_update_device_ring_slot_descriptor_77)
            retval := 0
            goto return_label
          }
        }
      }
    }
  }
  label return_label
}
